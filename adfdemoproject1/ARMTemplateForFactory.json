{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfdemoproject1"
		},
		"ADLS_ProjectDemo_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ADLS_ProjectDemo_LS'"
		},
		"MongoDB_money_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MongoDB_money_LS'"
		},
		"MongoDb_Bank_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MongoDb_Bank_LS'"
		},
		"MongoDb_LS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MongoDb_LS'"
		},
		"ADLS_ProjectDemo_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hiteshadls.dfs.core.windows.net/"
		},
		"MongoDB_money_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "money_laundering"
		},
		"MongoDb_Bank_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Bank_DB"
		},
		"MongoDb_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "projectdemo"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Data Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data Ingestion",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbV2Source",
								"batchSize": 100
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MongoDB_local",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "sampledataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-02T19:25:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MongoDB_local')]",
				"[concat(variables('factoryId'), '/datasets/sampledataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Mongo_to_ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbV2Source",
								"batchSize": 100
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Mongo_Bank_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Bank_parquet_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Mongo_Bank_DS')]",
				"[concat(variables('factoryId'), '/datasets/Bank_parquet_DS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data_Transform_stage1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DataFlow_Silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_cleaning_stage1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ADLS": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_cleaning_stage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mongo_to_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbV2Source",
								"batchSize": 100
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MongoDB_money_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet_money_launderingDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-08-07T12:30:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MongoDB_money_DS')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_money_launderingDS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bank_ADLS_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_ProjectDemo_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "creditscore.parquet",
						"folderPath": "Bank_Data/Raw_Data",
						"fileSystem": "landing"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ID",
						"type": "UTF8"
					},
					{
						"name": "Customer_ID",
						"type": "UTF8"
					},
					{
						"name": "Month",
						"type": "UTF8"
					},
					{
						"name": "Name",
						"type": "UTF8"
					},
					{
						"name": "Age",
						"type": "UTF8"
					},
					{
						"name": "SSN",
						"type": "UTF8"
					},
					{
						"name": "Occupation",
						"type": "UTF8"
					},
					{
						"name": "Annual_Income",
						"type": "UTF8"
					},
					{
						"name": "Monthly_Inhand_Salary",
						"type": "DOUBLE"
					},
					{
						"name": "Num_Bank_Accounts",
						"type": "INT64"
					},
					{
						"name": "Num_Credit_Card",
						"type": "INT64"
					},
					{
						"name": "Interest_Rate",
						"type": "INT64"
					},
					{
						"name": "Num_of_Loan",
						"type": "UTF8"
					},
					{
						"name": "Type_of_Loan",
						"type": "UTF8"
					},
					{
						"name": "Delay_from_due_date",
						"type": "INT64"
					},
					{
						"name": "Num_of_Delayed_Payment",
						"type": "UTF8"
					},
					{
						"name": "Changed_Credit_Limit",
						"type": "UTF8"
					},
					{
						"name": "Num_Credit_Inquiries",
						"type": "DOUBLE"
					},
					{
						"name": "Credit_Mix",
						"type": "UTF8"
					},
					{
						"name": "Outstanding_Debt",
						"type": "UTF8"
					},
					{
						"name": "Credit_Utilization_Ratio",
						"type": "DOUBLE"
					},
					{
						"name": "Credit_History_Age",
						"type": "UTF8"
					},
					{
						"name": "Payment_of_Min_Amount",
						"type": "UTF8"
					},
					{
						"name": "Total_EMI_per_month",
						"type": "DOUBLE"
					},
					{
						"name": "Amount_invested_monthly",
						"type": "UTF8"
					},
					{
						"name": "Payment_Behaviour",
						"type": "UTF8"
					},
					{
						"name": "Monthly_Balance",
						"type": "UTF8"
					},
					{
						"name": "Credit_Score",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_ProjectDemo_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bank_parquet_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_ProjectDemo_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bank_Data/Raw_Data",
						"fileSystem": "landing"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_ProjectDemo_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDB_local')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDb_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"schema": [],
				"typeProperties": {
					"collection": "sampledata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDb_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDB_money_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDB_money_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"schema": [],
				"typeProperties": {
					"collection": "Hi_transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDB_money_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mongo_Bank_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MongoDb_Bank_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbV2Collection",
				"schema": [],
				"typeProperties": {
					"collection": "credit_score"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MongoDb_Bank_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_money_launderingDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_ProjectDemo_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Raw_Data",
						"fileSystem": "landing"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_ProjectDemo_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleaned_bank_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_ProjectDemo_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "Bank_Data/silver/@{formatDateTime(utcNow(),'yyyy')}/@{formatDateTime(utcNow(),'MM')}/@{formatDateTime(utcNow(),'dd')}",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_ProjectDemo_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/money_launderingCSV_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_ProjectDemo_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Raw_Data",
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_ProjectDemo_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sampledataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ADLS_ProjectDemo_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sampledata",
						"fileSystem": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ADLS_ProjectDemo_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADLS_ProjectDemo_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ADLS_ProjectDemo_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ADLS_ProjectDemo_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDB_money_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbV2",
				"typeProperties": {
					"connectionString": "[parameters('MongoDB_money_LS_connectionString')]",
					"database": "[parameters('MongoDB_money_LS_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "selfhostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDb_Bank_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbV2",
				"typeProperties": {
					"connectionString": "[parameters('MongoDb_Bank_LS_connectionString')]",
					"database": "[parameters('MongoDb_Bank_LS_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "selfhostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MongoDb_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MongoDbV2",
				"typeProperties": {
					"connectionString": "[parameters('MongoDb_LS_connectionString')]",
					"database": "[parameters('MongoDb_LS_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "selfhostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "on-premise to ADF",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_cleaning_stage1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Bank_ADLS_DS",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cleaned_bank_DS",
								"type": "DatasetReference"
							},
							"name": "ADLS"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Customer_ID as string,",
						"          Month as string,",
						"          Name as string,",
						"          Age as string,",
						"          SSN as string,",
						"          Occupation as string,",
						"          Annual_Income as string,",
						"          Monthly_Inhand_Salary as double,",
						"          Num_Bank_Accounts as long,",
						"          Num_Credit_Card as long,",
						"          Interest_Rate as long,",
						"          Num_of_Loan as string,",
						"          Type_of_Loan as string,",
						"          Delay_from_due_date as long,",
						"          Num_of_Delayed_Payment as string,",
						"          Changed_Credit_Limit as string,",
						"          Num_Credit_Inquiries as double,",
						"          Credit_Mix as string,",
						"          Outstanding_Debt as string,",
						"          Credit_Utilization_Ratio as double,",
						"          Credit_History_Age as string,",
						"          Payment_of_Min_Amount as string,",
						"          Total_EMI_per_month as double,",
						"          Amount_invested_monthly as string,",
						"          Payment_Behaviour as string,",
						"          Monthly_Balance as string,",
						"          Credit_Score as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 derive(Age1 = iif(endsWith(toString(Age), '_'), substring(toString(Age), 1, length(toString(Age)) - 1),toString(Age)),",
						"          Occupation1 = replace(Occupation, '_______', ''),",
						"          Annual_Income1 = iif(endsWith(toString(Annual_Income), '_'), substring(toString(Annual_Income), 1, length(toString(Annual_Income))- 1),toString(Annual_Income)),",
						"          Num_of_Loan1 = iif(endsWith(toString(Num_of_Loan), '_'), substring(toString(Num_of_Loan), 1, length(toString(Num_of_Loan)) - 1),toString(Num_of_Loan)),",
						"          Num_of_Delayed_Payment1 = iif(endsWith(toString(Num_of_Delayed_Payment), '_'), substring(toString(Num_of_Delayed_Payment), 1, length(toString(Num_of_Delayed_Payment)) - 1),Num_of_Delayed_Payment),",
						"          Changed_Credit_Limit1 = iif(endsWith(toString(Changed_Credit_Limit), '_'), substring(toString(Changed_Credit_Limit), 1, length(toString(Changed_Credit_Limit)) - 1),toString(Changed_Credit_Limit)),",
						"          Credit_Mix1 = iif(endsWith(toString(Credit_Mix), '_'), substring(toString(Credit_Mix), 1, length(toString(Credit_Mix)) - 1),toString(Credit_Mix)),",
						"          Outstanding_Debt1 = iif(endsWith(toString(Outstanding_Debt), '_'), substring(toString(Outstanding_Debt), 1, length(toString(Outstanding_Debt)) - 1),toString(Outstanding_Debt)),",
						"          Amount_invested_monthly1 = iif(endsWith(toString(Amount_invested_monthly), '_'), substring(toString(Amount_invested_monthly), 1, length(toString(Amount_invested_monthly)) - 1),toString(Amount_invested_monthly)),",
						"          Monthly_Balance1 = iif(endsWith(toString(Monthly_Balance), '_'), substring(toString(Monthly_Balance), 1, length(toString(Monthly_Balance)) - 1),toString(Monthly_Balance)),",
						"          Payment_Behaviour1 = iif(startsWith(Payment_Behaviour, '!'), toString(null()), Payment_Behaviour)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          ID,",
						"          Customer_ID,",
						"          Month,",
						"          Name,",
						"          SSN,",
						"          Monthly_Inhand_Salary,",
						"          Num_Bank_Accounts,",
						"          Num_Credit_Card,",
						"          Interest_Rate,",
						"          Type_of_Loan,",
						"          Delay_from_due_date,",
						"          Num_Credit_Inquiries,",
						"          Credit_Utilization_Ratio,",
						"          Credit_History_Age,",
						"          Payment_of_Min_Amount,",
						"          Total_EMI_per_month,",
						"          Credit_Score,",
						"          Age1,",
						"          Occupation1,",
						"          Annual_Income1,",
						"          Num_of_Loan1,",
						"          Num_of_Delayed_Payment1,",
						"          Changed_Credit_Limit1,",
						"          Credit_Mix1,",
						"          Outstanding_Debt1,",
						"          Amount_invested_monthly1,",
						"          Monthly_Balance1,",
						"          Payment_Behaviour1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(Age2 = iif(toInteger(Age1) > 125, toInteger(null()), toInteger(Age1))) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          ID,",
						"          Customer_ID,",
						"          Month,",
						"          Name,",
						"          SSN,",
						"          Monthly_Inhand_Salary,",
						"          Num_Bank_Accounts,",
						"          Num_Credit_Card,",
						"          Interest_Rate,",
						"          Type_of_Loan,",
						"          Delay_from_due_date,",
						"          Num_Credit_Inquiries,",
						"          Credit_Utilization_Ratio,",
						"          Credit_History_Age,",
						"          Payment_of_Min_Amount,",
						"          Total_EMI_per_month,",
						"          Credit_Score,",
						"          Age2,",
						"          Occupation1,",
						"          Annual_Income1,",
						"          Num_of_Loan1,",
						"          Num_of_Delayed_Payment1,",
						"          Changed_Credit_Limit1,",
						"          Credit_Mix1,",
						"          Outstanding_Debt1,",
						"          Amount_invested_monthly1,",
						"          Monthly_Balance1,",
						"          Payment_Behaviour1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(Age3 = iif(toInteger(Age2)<0,toInteger(null()),toInteger(Age2)),",
						"          Num_Bank_Accounts1 = abs(toInteger(Num_Bank_Accounts)),",
						"          Num_of_Loan2 = iif(toInteger(Num_of_Loan1)<0,toInteger(null()),toInteger(Num_of_Loan1)),",
						"          Delay_from_due_date1 = abs(Delay_from_due_date),",
						"          Num_of_Delayed_Payment2 = abs(toInteger(Num_of_Delayed_Payment1))) ~> derivedColumn3",
						"derivedColumn3 select(mapColumn(",
						"          ID,",
						"          Customer_ID,",
						"          Month,",
						"          Name,",
						"          SSN,",
						"          Age3,",
						"          Occupation1,",
						"          Monthly_Inhand_Salary,",
						"          Num_Bank_Accounts1,",
						"          Num_Credit_Card,",
						"          Interest_Rate,",
						"          Num_of_Loan2,",
						"          Type_of_Loan,",
						"          Delay_from_due_date1,",
						"          Num_Credit_Inquiries,",
						"          Credit_Utilization_Ratio,",
						"          Credit_History_Age,",
						"          Payment_of_Min_Amount,",
						"          Total_EMI_per_month,",
						"          Credit_Score,",
						"          Annual_Income1,",
						"          Changed_Credit_Limit1,",
						"          Credit_Mix1,",
						"          Num_of_Delayed_Payment2,",
						"          Outstanding_Debt1,",
						"          Amount_invested_monthly1,",
						"          Monthly_Balance1,",
						"          Payment_Behaviour1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ADLS"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Bank_ADLS_DS')]",
				"[concat(variables('factoryId'), '/datasets/cleaned_bank_DS')]"
			]
		}
	]
}